# --- 1. Deployment: 컨테이너를 실행하고 관리하는 역할 ---
# docker-compose의 'image', 'container_name', 'restart' 설정을 담당합니다.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zipkin-deployment # 이 Deployment 이름입니다.
spec:
  replicas: 1 # 항상 1개의 Zipkin 컨테이너(Pod)가 실행되도록 보장합니다.
  selector:   # 이 Deployment가 *어떤 Pod들을 관리할지 선택*하는 규칙입니다. (아래 labels와 일치해야 함)
    matchLabels:
      app: zipkin
  template:   # 실제로 생성될 컨테이너(Pod)의 설계도입니다.
    metadata:
      labels:
        app: zipkin # Pod에 'app: zipkin'이라는 이름표를 붙입니다.
    spec:
      containers:
        - name: zipkin-container # 컨테이너의 이름
          image: openzipkin/zipkin:latest # 사용할 Docker 이미지
          ports:
            - containerPort: 9411 # 컨테이너가 내부적으로 사용하는 포트

---
# --- 2. Service: 컨테이너를 외부에 노출하고, 내부 통신을 위한 주소를 만드는 역할 ---
# docker-compose의 'ports'와 'networks' 설정을 담당합니다.
apiVersion: v1
kind: Service
metadata:
  name: zipkin-service # 이 Service의 이름입니다. 다른 서비스들은 'zipkin-service'라는 이름으로 이 Pod에 접근할 수 있습니다.
spec:
  type: ClusterIP
  selector:
    app: zipkin    # 'app: zipkin' 이름표가 붙은 Pod를 찾아 연결합니다.
  ports:
    - port: 9411 # 쿠버네티스 클러스터 내부에서 사용할 포트
      targetPort: 9411 # 컨테이너가 실제로 사용하는 포트 (위 containerPort와 일치)
# $ kubectl port-forward svc/zipkin-service 9411:9411

## 실행 및 접속 방법
# 1. 실행: 터미널에서 MSA-Study 최상위 폴더 기준으로 아래 명령어를 실행하여 쿠버네티스에 적용합니다.
# $ kubectl apply -f k8s/monitoring/zipkin-deploy.yml
# 2. 확인: 잠시 후, 아래 명령어로 zipkin-deployment Pod가 Running 상태인지 확인합니다.
# $ kubectl get pods
# 3. 접속: 이제 웹 브라우저에서 NodePort로 지정한 포트를 사용하여 접속할 수 있습니다.
# URL: http://localhost:30411